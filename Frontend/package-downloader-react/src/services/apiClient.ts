//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.4.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

import { notificationStore } from "../stores/NotificationStore";
import { cloneObject } from "../utils/objectsTools";
import {compareVersions} from "../utils/versionsComparer.ts";


/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming


export class PackagesAPIClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private readonly baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param packageType (optional) 
     * @param namePart (optional) 
     * @return Success
     */
    getSearchResults = async (packageType: PackageType | undefined, namePart: string | undefined): Promise<PackageInfo[]> => {
        let url_ = this.baseUrl + "/api/PackageInfo/GetSearchResults?";
        if (packageType === null)
            throw new Error("The parameter 'packageType' cannot be null.");
        else if (packageType !== undefined)
            url_ += "packageType=" + encodeURIComponent("" + packageType) + "&";
        if (namePart === null)
            throw new Error("The parameter 'namePart' cannot be null.");
        else if (namePart !== undefined)
            url_ += "namePart=" + encodeURIComponent("" + namePart) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        let response = await this.http.fetch(url_, options_);
        let results = await this.processGetSearchResults(response);
        return results.map(item => cloneObject(item, new PackageInfo()));
    };

    protected processGetSearchResults = async (response: Response): Promise<IPackageInfo[]> => {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as IPackageInfo[];
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PackageInfo[]>(null as any);
    };

    /**
     * @param packageType (optional)
     * @param namePart (optional)
     * @return Success
     */
    getSearchSuggestions = async (packageType: PackageType | undefined, namePart: string | undefined): Promise<string[]> => {
        let url_ = this.baseUrl + "/api/PackageInfo/GetSearchSuggestions?";
        if (packageType === null)
            throw new Error("The parameter 'packageType' cannot be null.");
        else if (packageType !== undefined)
            url_ += "packageType=" + encodeURIComponent("" + packageType) + "&";
        if (namePart === null)
            throw new Error("The parameter 'namePart' cannot be null.");
        else if (namePart !== undefined)
            url_ += "namePart=" + encodeURIComponent("" + namePart) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        let _response = await this.http.fetch(url_, options_);
        return this.processGetSearchSuggestions(_response);
    };

    protected processGetSearchSuggestions = async (response: Response): Promise<string[]> => {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        }
        if (status === 200) {
            let _responseText = await response.text();
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string[];
            return result200;
        } else if (status !== 200 && status !== 204) {
            let _responseText1 = await response.text();
            return throwException("An unexpected server error occurred.", status, _responseText1, _headers);
        }
        return Promise.resolve<string[]>(null as any);
    };

    /**
     * @param body (optional)
     * @return Success
     */
    preparePackagesDownloadLink = async (body: PackageRequest | undefined): Promise<string> => {
        let url_ = this.baseUrl + "/api/Packages/PreparePackagesDownloadLink";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        let _response = await this.http.fetch(url_, options_);
        return this.processPreparePackagesDownloadLink(_response);
    };

    protected processPreparePackagesDownloadLink = async (response: Response): Promise<string> => {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return await response.text();
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.reject<string>(null as any);
    };

    /**
     * @param packageType (optional)
     * @param userPrompt (optional)
     * @return Success
     */
    getRecommendations = async (packageType: PackageType | undefined, userPrompt: string | undefined, langCode: string | undefined): Promise<PackageRecommendation[]> => {
        let url_ = this.baseUrl + "/api/Recommendations/GetRecommendations?";
        if (packageType === null)
            throw new Error("The parameter 'packageType' cannot be null.");
        else if (packageType !== undefined)
            url_ += "packageType=" + encodeURIComponent("" + packageType) + "&";
        if (userPrompt === null)
            throw new Error("The parameter 'userPrompt' cannot be null.");
        else if (userPrompt !== undefined)
            url_ += "userPrompt=" + encodeURIComponent("" + userPrompt) + "&";

        if (langCode)
            url_ += "langCode=" + encodeURIComponent("" + langCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        let _response = await this.http.fetch(url_, options_);
        return this.processGetRecommendations(_response);
    };

    protected processGetRecommendations = async (response: Response): Promise<PackageRecommendation[]> => {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        }
        if (status === 200) {
            let _responseText = await response.text();
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as PackageRecommendation[];
            return result200;
        } else if (status !== 200 && status !== 204) {
            let _responseText1 = await response.text();
            return throwException("An unexpected server error occurred.", status, _responseText1, _headers);
        }
        return Promise.resolve<PackageRecommendation[]>(null as any);
    };
}

export interface PackageDetails {
    packageID: string;
    packageVersion: string;
    packageIconUrl: string;
}

export interface IPackageInfo {
    id: string;
    currentVersion: string;
    otherVersions: string[];
    description: string;
    tags: string[];
    authorInfo: string;
    repositoryUrl: string | null;
    iconUrl: string | null;
    packageUrl: string | null;
    downloadsCount: number;
    isAddedInCart: boolean;
    getPackageIconOrStockImage(): string;
}

export class PackageInfo implements IPackageInfo {
    id!: string;
    currentVersion!: string;
    otherVersions!: string[];
    description!: string;
    tags!: string[];
    authorInfo!: string;
    repositoryUrl!: string | null;
    iconUrl!: string | null;
    packageUrl!: string | null;
    downloadsCount!: number;
    isAddedInCart: boolean = false;
    getPackageIconOrStockImage = () => this.iconUrl ?? "https://img.icons8.com/isometric/64/box.png";
    getLastVersion = () =>
        this.otherVersions?.
        sort((version, versionNext) => compareVersions(version, versionNext, 'DESC'))
            .at(0) ?? this.currentVersion;
}


export interface PackageRecommendation {
    name: string;
    id: string;
    choiceDescription: string;
    codeExample: string;
}

export interface PackageRequest {
    packageType: PackageType;
    sdkVersion?: string | null;
    packagesDetails: PackageDetails[];
}

export enum PackageType {
    Npm = "Npm",
    Nuget = "Nuget",
    VsCode = "VsCode",
    Docker = "Docker"
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

interface ApiHeartbeat {
    isAlive: boolean;
}

const HEARTBEAT_ENDPOINT = '/api/Heartbeat/HeartbeatExists';

export async function isHeartbeatExists(baseUrl: string) {

    try {
        let response = await fetch(baseUrl + HEARTBEAT_ENDPOINT, { method: 'GET' });
        let result = await response.json() as ApiHeartbeat;
        return result.isAlive;
    }
    catch (error) {
        return false;
    }
}

async function getApiUrl(): Promise<string> {

    const FRONTEND_PORT_DEV = '5173';
    const BACKEND_PORT_DEV = '5026';

    let UrlMain = location.origin;
    let UrlDev = UrlMain.replace(FRONTEND_PORT_DEV, BACKEND_PORT_DEV);

    let UrlBaseVariants = [UrlMain, UrlDev];

    for (const urlVariant of UrlBaseVariants) {
        if (await isHeartbeatExists(urlVariant)) {
            return urlVariant;
        }
    }

    throw new Error("API server not found!");
}

let apiClient: PackagesAPIClient | undefined = undefined;

export const getPackageApiClient = async () => {

    try {
        if (!apiClient) {
            apiClient = new PackagesAPIClient(await getApiUrl());
        }
        return apiClient;
    } catch (error: any) {
        notificationStore.addError(error.toString());
        throw error;
    }
};

console.log('Test CI CD');