//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

import { downloadFile } from "./fileDownloader";

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming


export class PackagesAPIClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param packageType (optional) 
     * @param namePart (optional) 
     * @return Success
     */
    getSearchResults(packageType: PackageType | undefined, namePart: string | undefined): Promise<PackageInfo[]> {
        let url_ = this.baseUrl + "/api/PackageInfo/GetSearchResults?";
        if (packageType === null)
            throw new Error("The parameter 'packageType' cannot be null.");
        else if (packageType !== undefined)
            url_ += "packageType=" + encodeURIComponent("" + packageType) + "&";
        if (namePart === null)
            throw new Error("The parameter 'namePart' cannot be null.");
        else if (namePart !== undefined)
            url_ += "namePart=" + encodeURIComponent("" + namePart) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSearchResults(_response);
        });
    }

    protected processGetSearchResults(response: Response): Promise<PackageInfo[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PackageInfo.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PackageInfo[]>(null as any);
    }

    /**
     * @param packageType (optional) 
     * @param namePart (optional) 
     * @return Success
     */
    getSearchSuggestions(packageType: PackageType | undefined, namePart: string | undefined): Promise<string[]> {
        let url_ = this.baseUrl + "/api/PackageInfo/GetSearchSuggestions?";
        if (packageType === null)
            throw new Error("The parameter 'packageType' cannot be null.");
        else if (packageType !== undefined)
            url_ += "packageType=" + encodeURIComponent("" + packageType) + "&";
        if (namePart === null)
            throw new Error("The parameter 'namePart' cannot be null.");
        else if (namePart !== undefined)
            url_ += "namePart=" + encodeURIComponent("" + namePart) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSearchSuggestions(_response);
        });
    }

    protected processGetSearchSuggestions(response: Response): Promise<string[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getPackagesAsArchive(body: PackageRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Packages/GetPackagesAsArchive";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPackagesAsArchive(_response);
        });
    }

    protected processGetPackagesAsArchive(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return downloadFile(response).then(() => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class PackageDetails implements IPackageDetails {
    packageID!: string;
    packageVersion!: string;

    constructor(data?: IPackageDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.packageID = _data["packageID"];
            this.packageVersion = _data["packageVersion"];
        }
    }

    equals(otherObject: PackageDetails): boolean {
        return this.packageID === otherObject.packageID
               &&
               this.packageVersion === otherObject.packageVersion
    }

    static fromJS(data: any): PackageDetails {
        data = typeof data === 'object' ? data : {};
        let result = new PackageDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["packageID"] = this.packageID;
        data["packageVersion"] = this.packageVersion;
        return data;
    }
}

export interface IPackageDetails {
    packageID: string;
    packageVersion: string;
}

export class PackageInfo implements IPackageInfo {
    id!: string;
    currentVersion!: string;
    otherVersions?: string[] | undefined;
    description?: string | undefined;
    tags?: string[] | undefined;
    authorInfo?: string | undefined;
    repositoryUrl?: string | undefined;
    iconUrl?: string | undefined;
    downloadsCount?: number | undefined;
    packageUrl? : string | undefined;

    isAddedInCart: boolean = false;

    getPackageIconOrStockImage() : string {
        return this.iconUrl ? this.iconUrl : "https://img.icons8.com/isometric/64/box.png";
    }

    constructor(data?: IPackageInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.currentVersion = _data["currentVersion"];
            if (Array.isArray(_data["otherVersions"])) {
                this.otherVersions = [] as any;
                for (let item of _data["otherVersions"])
                    this.otherVersions!.push(item);
            }
            this.description = _data["description"];
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
            this.authorInfo = _data["authorInfo"];
            this.repositoryUrl = _data["repositoryUrl"];
            this.iconUrl = _data["iconUrl"];
            this.downloadsCount = _data["downloadsCount"];
            this.packageUrl = _data["packageUrl"];
        }
    }

    static fromJS(data: any): PackageInfo {
        data = typeof data === 'object' ? data : {};
        let result = new PackageInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["currentVersion"] = this.currentVersion;
        if (Array.isArray(this.otherVersions)) {
            data["otherVersions"] = [];
            for (let item of this.otherVersions)
                data["otherVersions"].push(item);
        }
        data["description"] = this.description;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        data["authorInfo"] = this.authorInfo;
        data["repositoryUrl"] = this.repositoryUrl;
        data["iconUrl"] = this.iconUrl;
        data["downloadsCount"] = this.downloadsCount;
        data["packageUrl"] = this.packageUrl;
        data["isAddedInCart"] =this.isAddedInCart;
        return data;
    }
}

export interface IPackageInfo {
    id: string;
    currentVersion: string;
    otherVersions?: string[] | undefined;
    description?: string | undefined;
    tags?: string[] | undefined;
    authorInfo?: string | undefined;
    repositoryUrl?: string | undefined;
    iconUrl?: string | undefined;
    downloadsCount?: number | undefined;
    packageUrl? : string | undefined;

    // Поле-флаг, что запись включена в корзину
    isAddedInCart : boolean;
}

export class PackageRequest implements IPackageRequest {
    packageType?: PackageType;
    sdkVersion?: string | undefined;
    packagesDetails?: PackageDetails[] | undefined;

    constructor(data?: IPackageRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.packageType = _data["packageType"];
            this.sdkVersion = _data["sdkVersion"];
            if (Array.isArray(_data["packagesDetails"])) {
                this.packagesDetails = [] as any;
                for (let item of _data["packagesDetails"])
                    this.packagesDetails!.push(PackageDetails.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PackageRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PackageRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["packageType"] = this.packageType;
        data["sdkVersion"] = this.sdkVersion;
        if (Array.isArray(this.packagesDetails)) {
            data["packagesDetails"] = [];
            for (let item of this.packagesDetails)
                data["packagesDetails"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPackageRequest {
    packageType?: PackageType;
    sdkVersion?: string | undefined;
    packagesDetails?: PackageDetails[] | undefined;
}

export enum PackageType {
    Npm = "Npm",
    Nuget = "Nuget",
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function getDevAPIUrl(): string {

    const backendPort = 5026;
    const frontendPort = 3000;
    const protocol = location.protocol + '//';

    let frontendLocation = location.hostname;
    const gitDomain = 'app.github.dev';
    let isGithubHosting = frontendLocation.endsWith(gitDomain);

    const apiURL = isGithubHosting ? frontendLocation.replace(frontendPort.toString(), backendPort.toString())
        : `${frontendLocation}:${backendPort}`;

    return  protocol + apiURL;
}

export const ApiDevURL: string  = getDevAPIUrl();

export const packageApiClient = new PackagesAPIClient(ApiDevURL);